121. Best Time to Buy and Sell Stock

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int op=0;//Overall profit
        int psf=0;//Profit so far
        int lp=Integer.MAX_VALUE;//Least price to buy
        for(int i=0;i<n;i++){
            if(prices[i]<lp){
                lp=prices[i];
            }
            psf=prices[i]-lp;
            if(op<psf){
                op=psf;
            }
        }
        return op;
    }
}

2)122. Best Time to Buy and Sell Stock II
Medium

You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int b=0;
        int s=0;
        int op=0;
        for(int i=1;i<n;i++){
            if(prices[i]<prices[s]){
                op+=prices[s]-prices[b];
                //System.out.println(i+","+op);
                b=i;
                s=i;
            }
            else {
                s=i;
            }
        }
        if(b!=s){
            op+=prices[s]-prices[b];
        }
        return op;
    }
}

3)714. Best Time to Buy and Sell Stock with Transaction Fee
Medium

You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6

class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n=prices.length;
        int obsp=-prices[0];
        int ossp=0;
        for(int i=1;i<n;i++){
            int nbsp=0;
            int nssp=0;
            if((ossp-prices[i])>obsp){
                nbsp=ossp-prices[i];
            }
            else{
                nbsp=obsp;
            }
            if((prices[i]+obsp-fee)>ossp){
                nssp=prices[i]+obsp-fee;
            }
            else{
                nssp=ossp;
            }
            obsp=nbsp;
            ossp=nssp;
        }
        return ossp;
    }
}

4)309. Best Time to Buy and Sell Stock with Cooldown
Medium

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0

class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int obsp=-prices[0];
        int ossp=0;
        int ocsp=0;
        for(int i=1;i<n;i++){
            int nbsp=0;
            int nssp=0;
            int ncsp=0;
            if((ocsp-prices[i])>obsp){
                nbsp=ocsp-prices[i];
            }
            else{
                nbsp=obsp;
            }
            if((prices[i]+obsp)>ossp){
                nssp=(prices[i]+obsp);
            }
            else{
                nssp=ossp;
            }
            ncsp=ossp;
            obsp=nbsp;
            ossp=nssp;
            ocsp=ncsp;
        }
        return ossp;
    }
}

5)123. Best Time to Buy and Sell Stock III
Hard

5180

110

Add to List

Share
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

class Solution {
    public int maxProfit(int[] prices) {
        //take profit if stock is sold at that day or before and take profit if stock is buyed on that day or after and take overall maximum of sum of two profits
        int n=prices.length;
        int[] dpl=new int[n];
        int lpl=prices[0];//least price left
        dpl[0]=0;
        int clp=0;//current left profit
        for(int i=1;i<n;i++){
            if(prices[i]<lpl){
                lpl=prices[i];
            }
            clp=prices[i]-lpl;
            if(clp>dpl[i-1]){
                dpl[i]=clp;
            }
            else{
                dpl[i]=dpl[i-1];
            }
        }
        int[] dpr=new int[n];
        int mpr=prices[n-1];//maximum price right
        int crp=0;//current right profit
        for(int i=n-2;i>=0;i--){
            if(prices[i]>mpr){
                mpr=prices[i];
            }
            crp=mpr-prices[i];
            if(crp>dpr[i+1]){
                dpr[i]=crp;
            }
            else{
                dpr[i]=dpr[i+1];
            }
        }
        int op=0;
        for(int i=0;i<n;i++){
            if(op<(dpl[i]+dpr[i])){
                op=dpl[i]+dpr[i];
            }
        }
        return op;
    }
}

6)188. Best Time to Buy and Sell Stock IV
Hard

You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n=prices.length;
        if(n==0){
            return 0;
        }
        int[][] dp=new int[k+1][n];
        // for(int i=1;i<=k;i++){
        //     for(int j=1;j<n;j++){
        //          //above row left maximum
        //         int arlm=Integer.MIN_VALUE;
        //         for(int l=0;l<j;l++){
        //             if((prices[j]-prices[l])+dp[i-1][l]>arlm){
        //                 arlm=(prices[j]-prices[l])+dp[i-1][l];
        //             }
        //         }
        //         dp[i][j]=Math.max(dp[i][j-1],arlm);
        //     }
        // }
        //reduced time complexity by storing all max values in above row left columns
        for(int i=1;i<=k;i++){
            int max=Integer.MIN_VALUE;
            for(int j=1;j<n;j++){
                 //above row left maximum
                int arlm=dp[i-1][j-1]-prices[j-1];
                if(max<arlm){
                    max=arlm;//store the max value in above row left side without including current price
                }
                dp[i][j]=Math.max(dp[i][j-1],max+prices[j]);
            }
        }
        return dp[k][n-1];
    }
}

