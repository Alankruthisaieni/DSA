Question: Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr]
of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.
Link: https://leetcode.com/problems/minimum-size-subarray-sum/
Video Link:https://www.youtube.com/watch?v=S6Xg-0uaODc

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0

Code:
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int n=nums.length;
        int minSize=Integer.MAX_VALUE;
        int sum=0;
        int size=0;
        //using two pointer approach
        for(int l=0,r=0;r<n;r++){
            sum+=nums[r];
            if(sum>=target){
                while(sum>=target){
                    sum-=nums[l];
                    // System.out.println(sum);
                    l+=1;
                }
                size=r-l+2;
                // System.out.println(sum+","+size);
                if(minSize>size){
                    minSize=size;
                }
            }
        }
        if(minSize>size){
            minSize=size;
        }
        return minSize;
    }
}
T.C : O(N)
