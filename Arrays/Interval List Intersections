986. Interval List Intersections
Link: https://leetcode.com/problems/interval-list-intersections/
You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].
Example 1:

Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Code:
class Solution {
    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {
        List<int[]> res=new ArrayList<>();
        int s1=firstList.length;
        int s2=secondList.length;
        int i=0,j=0;
        while(i<s1 && j<s2){
            if(firstList[i][1]>=secondList[j][0] && secondList[j][1]>=firstList[i][0]){
                int[] ans=new int[2];
                ans[0]=Math.max(firstList[i][0],secondList[j][0]);
                ans[1]=Math.min(firstList[i][1],secondList[j][1]);
                res.add(ans);
            }
            if(firstList[i][1]<secondList[j][1]){
                i+=1;
            }
            else{
                j+=1;
            }
        }
        return res.toArray(new int[res.size()][]);
    }
}
T.C:O(N)
