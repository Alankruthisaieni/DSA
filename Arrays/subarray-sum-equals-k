560. Subarray Sum Equals K
Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.

Link: https://leetcode.com/problems/subarray-sum-equals-k/ 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2

Code: 
class Solution {
    public int subarraySum(int[] nums, int k) {
        //1.BruteForce->O(N^3)
        //2.Using prefix sum -> O(N^2) with O(N) space
        //3.using sum variable -> O(N^2) 
        //4.Using Hashmap-> O(N)
        int n=nums.length;
        HashMap<Integer,Integer> hm=new HashMap<>();
        int sum=0,count=0;
        [for(int i=0;i<n;i++){
            sum+=nums[i];
            if(sum==k){
                count++;
            }
            if(hm.containsKey(sum-k)){
                count+=hm.get(sum-k);
            }
            if(hm.containsKey(sum)){
                hm.put(sum,hm.get(sum)+1);
            }
            else{
                hm.put(sum,1);
            }
        }]
        or
        [map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k))
                count += map.get(sum - k);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }]
        return count;
    }
}
T.C:O(N)
